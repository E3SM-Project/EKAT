# Configuration file for CACTS
#
# There are three main sections: project, machines build_types
#   - project: contains basic info on the project
#   - machines: contains a list of machines on which testing is allowed
#   - configurations: contains a list of build types that can be built
#
# The machines and configurations sections CAN contain an entry "default", which
# defines some defaults for all machines/build_types. Other entries will OVERWRITE anything
# that is also set in the default entry. It is recommended to keep the default
# entry, since it can be used to list ALL possible settings, for documentation purposes.
#
# Upon parsing the yaml file, CACTS will create one Project, one Machine, and one or
# more BuildType objects. These objects will contain members with *the same* name as the
# configs in the yaml file. Notice the settings names are hard-coded, so you can't add
# a new setting and hope that it gets set in the object.
#
# The objects settings CAN be used in the yaml file to programmatically set other options.
# For instance, a build type can use properties of the project/machine to set a cmake var.
# The syntax is ${<obj>.<prop>}, where <obj> is 'project', 'machine', or 'build', and
# and <prop> must be a valid attribute of the corresponding object (see the
# corresponding py files for valid options). If you use the ${..} syntax,
# we recommend that you wrap the entry in quotes, to avoid any surprise with YAML parsers.
# The ${..} syntax is actually more powerful than that, and can perform any python operation,
# with some restriction (e.g., imports or tinkering with global vars is prohibited,
# for security purposes.
#
# In addition to the ${..} syntax, CACTS also supports bash commands evaluation,
# with the syntax $(cmd). This can be used in conjunction with ${}. E.g., one can do
#  NetCDF_Fortran_ROOT: $(${machine.env_setup} && nf-config --prefix)
# Python expressions ${..} are always evaluated first, bash expressions $(..) are
# evaluated afterwards.

##########################################################################################
#                                 PROJECT SETTINGS                                       #
##########################################################################################

project:
  name: EKAT
  # NOTE: CACTS will also set project.root_dir at runtime, so you can actually use
  # ${project.root_dir} in the machines/configurations sections

##########################################################################################
#                                   MACHINES                                             #
##########################################################################################

machines:
  # CACTS will also set an entry machine.name, where the value of name matches the yaml map section name
  default:
    cxx_compiler: mpicxx
    c_compiler: mpicc
    ftn_compiler: mpifort
    mach_file: "${str(project.root_dir) + '/cmake/machine-files/' + machine.name + '.cmake'}"
    gpu_arch: null
    batch: null
    num_bld_res: null
    num_run_res: null
    valg_supp_file: null
    node_regex: null

  mappy:
    env_setup:
        - 'module purge'
        - 'module load sems-cmake/3.27.9 sems-git/2.42.0 sems-gcc/11.4.0 sems-openmpi-no-cuda/4.1.6'
    valg_supp_file: "${project.root_dir}/scripts/jenkins/valgrind/mappy.supp"

  weaver:
    env_setup:
      - "source /etc/profile.d/modules.sh"
      - "module purge"
      - "module load cmake/3.25.1 git/2.39.1 python/3.10.8 gcc/11.3.0 cuda/11.8.0 openmpi"

    batch: "bsub -I -q rhel8 -n 4 -gpu num=4"
    num_run_res: 4 # four gpus
    gpu_arch: "cuda"

  ghci-snl-cpu: {}

  ghci-snl-cuda:
    gpu_arch: "cuda"
    num_run_res: 2

#########################################################################################
#                              BUILDS CONFIGURATIONS                                    #
#########################################################################################

configurations:
  # CACTS will also set an entry build.name, where the value of name matches the yaml map section name
  default:
    longname: null # If not set, will default to build.name
    description: null
    uses_baselines: False
    on_by_default: True
    cmake_args:
      EKAT_ENABLE_ALL_PACKAGES: True
      EKAT_TEST_THREAD_INC: ${2 if machine.gpu_arch is None else 1}
      EKAT_TEST_MAX_THREADS: ${machine.num_run_res if machine.gpu_arch is None else 1}
      EKAT_DISABLE_TPL_WARNINGS: True
      EKAT_DEFAULT_BFB: True
      EKAT_TEST_DOUBLE_PRECISION: True
      EKAT_TEST_SINGLE_PRECISION: True
      EKAT_SKIP_FIND_YAML_CPP: True

  debug:
    longname: debug
    description: "debug build with both double and single precision testing"
    cmake_args:
      CMAKE_BUILD_TYPE: Debug
      Kokkos_ENABLE_DEBUG_BOUNDS_CHECK: True
  release:
    longname: release
    description: "release build with both double and single precision testing"
    cmake_args:
      CMAKE_BUILD_TYPE: Release
