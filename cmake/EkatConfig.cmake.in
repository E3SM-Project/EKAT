@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

# Make the install prefix available
set (EKAT_PREFIX @CMAKE_INSTALL_PREFIX@)

###############################
#      TPLs dependencies      #
###############################

# MPI
if (@EKAT_ENABLE_MPI@)
  find_dependency(MPI REQUIRED QUIET COMPONENTS C)
endif()

if (@EKAT_ENABLE_KOKKOS@)
  # Kokkos
  if (@Kokkos_FOUND@)
    find_dependency(Kokkos REQUIRED QUIET HINTS @Kokkos_DIR@)
  else()
    # We're installing Kokkos alongside ekat
    find_dependency(Kokkos REQUIRED QUIET HINTS @CMAKE_INSTALL_PREFIX@)
  endif()
endif()

# yaml-cpp
if (@EKAT_ENABLE_YAML_PARSER@)
  if (@yaml-cpp_FOUND@)
    find_dependency(yaml-cpp REQUIRED QUIET HINTS @yaml-cpp_DIR@)
  else()
    # We're installing yaml-cpp alongside ekat
    find_dependency(yaml-cpp REQUIRED QUIET HINTS @CMAKE_INSTALL_PREFIX@)
  endif()
endif()

if (@EKAT_ENABLE_LOGGING@)
  # spdlog
  if (@spdlog_FOUND@)
    find_dependency(spdlog REQUIRED QUIET HINTS @spdlog_DIR@)
  else()
    find_dependency(spdlog REQUIRED QUIET HINTS @CMAKE_INSTALL_PREFIX@)
  endif()
endif()

# Boost stacktrace library
if (@EKAT_HAS_STACKTRACE@)
  find_dependency(Boost 1.65.0 REQUIRED QUIET
                  COMPONENTS stacktrace_addr2line)
endif()

include (${CMAKE_CURRENT_LIST_DIR}/EkatTargets.cmake)

# Handle components
foreach(_comp IN LISTS Ekat_FIND_COMPONENTS)
  # Check if the component was found
  if(NOT TARGET ekat::${_comp})
    # If a required component is missing, set Ekat_FOUND to FALSE
    if(Ekat_FIND_REQUIRED_${_comp}) # This checks if the user requested it as REQUIRED
      set(Ekat_FOUND FALSE)
      # Provide a reason why Ekat was not found
      set(Ekat_NOT_FOUND_MESSAGE "Required component ${_comp} not found.")
      break() # Stop checking other components as the package is already considered not found
    endif()
  endif()
endforeach()
