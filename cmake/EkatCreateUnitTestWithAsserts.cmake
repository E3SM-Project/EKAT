include(EkatCreateUnitTest)

# This function creates unit tests to verify that calls to assert()
# perform as expected. Since assert() is compiled away in RELEASE
# builds, this function does not create tests for the asserts
# unless CMAKE_BUILD_TYPE is DEBUG.

# The function accepts a single source file. It parses the source file
# looking for the keyword "EKAT_TEST_ASSERT". For each line with that
# keyword, it generates a separate unit test. The i-th unit test of
# this series of test will remove all lines containing the keyword,
# except for the i-th one, where it will simply remove the keyword

# Since the keyword is removed, it can appear in any part of the line,
# even in a comment at the end. The limitation of this approach is that
# one cannot have a multi-line function call.
function(EkatCreateUnitTestWithAsserts test_base_name test_meta_src)

  # Generate the *_sources.txt file in the bld dir
  execute_process (
    COMMAND ${EKAT_SOURCE_DIR}/cmake/gen_assert_test_src.py
            -s ${CMAKE_CURRENT_LIST_DIR}/${test_meta_src}
            -o ${CMAKE_CURRENT_BINARY_DIR}
    RESULT_VARIABLE RET
    OUTPUT_VARIABLE OUT
    ERROR_VARIABLE OUT
  )

  if (NOT RET EQUAL 0)
    string (CONCAT msg
            "Something went wrong while running gen_assert_test_src.py\n"
            "Here's the output:\n"
            "${OUT}")
    message ("${msg}")
    message (FATAL_ERROR "Aborting...")
  endif()

  # This trick forces CMake to re-run if the source file changes.
  # We need this, since the *actual* source files for the tests are
  # generated by an external script, so CMake does not know that they
  # depend on test_meta_src. Also, if we modify test_meta_src, adding
  # a new EKAT_TEST_ASSERT line, we must re-run cmake, since we need
  # to add a new target
  # NOTE: this has the disadvantage of re-running cmake *every time*
  #       we touch the source file. We *could* use custom command/target
  #       trickery to set up file dependency, but it would not trigger
  #       a cmake re-run, which is necessary to create/remove tests
  configure_file (${CMAKE_CURRENT_SOURCE_DIR}/${test_meta_src}
                  ${CMAKE_CURRENT_BINARY_DIR}/${test_meta_src}.bkp)

  get_filename_component(base_src ${test_meta_src} NAME_WE)

  # First, the unit test with *all* occurrences of EKAT_TEST_ASSERT
  # stripped, which is *not* supposed to fail
  EkatCreateUnitTest(
    ${test_base_name}
    ${CMAKE_CURRENT_BINARY_DIR}/${base_src}.cpp
    ${ARGN}
  )

  # All the other tests (if any) should *all* fail.
  # However, we don't want to build them if CMAKE_BUILD_TYPE is not DEBUG
  string(STRIP "${OUT}" OUT)
  IsDebugBuild(APP_IS_DEBUG)
  if (OUT EQUAL 0 OR NOT APP_IS_DEBUG)
    return()
  endif()

  foreach (N RANGE 1 ${OUT})
    EkatCreateUnitTest(
      ${test_base_name}_check_assert_${N}
      ${CMAKE_CURRENT_BINARY_DIR}/${base_src}_${N}.cpp
      WILL_FAIL
      ${ARGN}
    )
  endforeach ()
endfunction(EkatCreateUnitTestWithAsserts)
