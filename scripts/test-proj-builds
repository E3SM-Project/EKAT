#!/usr/bin/env python3

from tpb_utils import check_minimum_python_version, GoodFormatter
check_minimum_python_version(3, 4)

import argparse, sys, pathlib

from test_proj_builds import TestProjBuilds

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} <ARGS> [--verbose]
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run all tests on machine FOO, using yaml config file /bar.yaml on machine 'mappy' \033[0m
    > cd $scream_repo/components/eamxx
    > ./scripts/{0} -m mappy -f /bar.yaml
""".format(pathlib.Path(args[0]).name),
        description=description,
        formatter_class=GoodFormatter
    )

    parser.add_argument("-f","--config-file", help="YAML file containing valid project/machine settings")

    parser.add_argument("-s", "--submit", action="store_true", help="Submit results to dashboad")
    parser.add_argument("-p", "--parallel", action="store_true",
                        help="Launch the different build types stacks in parallel")

    parser.add_argument("-g", "--generate", action="store_true",
        help="Instruct test-all-eamxx to generate baselines from current commit. Skips tests")

    parser.add_argument("-b", "--baseline-dir",
        help="Directory where baselines should be read/written from/to (depending if -g is used). Default is None which skips all baseline tests. AUTO means use machine-defined folder.")

    parser.add_argument("-m", "--machine-name",
        help="The name of the machine where we're testing. Must be found in machine_specs.py")

    parser.add_argument("-c", "--cmake-args", action="extend", default=[],
            help="Extra custom options to pass to cmake. Can use multiple times for multiple cmake options. The -D is added for you, so just do VAR=VALUE. These value will supersed any other setting (including machine/build specs)")

    parser.add_argument("-t", "--build-types", action="extend", nargs='+', default=[],
                        help=f"Only run specific test configurations")

    parser.add_argument("-w", "--work-dir",
        help="The work directory where all the building/testing will happen. Defaults to ${root_dir}/ctest-build")
    parser.add_argument("-r", "--root-dir",
        help="The root directory of the project (where the main CMakeLists.txt file is located)")

    #  parser.add_argument("--quick-rerun", action="store_true",
    #                      help="Do not clean the build dir, and do not reconfigure. Just (incremental) build and test.")

    parser.add_argument("--no-build", action="store_true",
            help="Only run config step, skip build and tests")
    parser.add_argument("--no-run", action="store_true",
            help="Only run config and build steps, skip tests (implies --no-build)")

    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Print output of config/build/test phases as they would be printed by running them manually.")

    parser.add_argument("-R", "--test-regex",
                        help="Limit ctest to running only tests that match this regex")
    parser.add_argument("-L", "--test-labels", nargs='+', default=[],
                        help="Limit ctest to running only tests that match this label")

    return parser.parse_args(args[1:])

###############################################################################
def _main_func(description):
###############################################################################
    tpb = TestProjBuilds(**vars(parse_command_line(sys.argv, description)))

    success = tpb.run()

    print("OVERALL STATUS: {}".format("PASS" if success else "FAIL"))

    sys.exit(0 if success else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
